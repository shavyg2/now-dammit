{"id":"../node_modules/regex-parser/lib/index.js","dependencies":[{"name":"D:\\dev\\dammit\\package.json","includedInParent":true,"mtime":1562863056316},{"name":"D:\\dev\\dammit\\node_modules\\regex-parser\\package.json","includedInParent":true,"mtime":1562862684228}],"generated":{"js":"\"use strict\";\n\n/**\n * RegexParser\n * Parses a string input.\n *\n * @name RegexParser\n * @function\n * @param {String} input The string input that should be parsed as regular\n * expression.\n * @return {RegExp} The parsed regular expression.\n */\nvar RegexParser = module.exports = function (input) {\n\n    // Validate input\n    if (typeof input !== \"string\") {\n        throw new Error(\"Invalid input. Input must be a string\");\n    }\n\n    // Parse input\n    var m = input.match(/(\\/?)(.+)\\1([a-z]*)/i);\n\n    // Invalid flags\n    if (m[3] && !/^(?!.*?(.).*?\\1)[gmixXsuUAJ]+$/.test(m[3])) {\n        return RegExp(input);\n    }\n\n    // Create the regular expression\n    return new RegExp(m[2], m[3]);\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/regex-parser/lib/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"../node_modules/regex-parser/lib/index.js":"\"use strict\";\n\n/**\n * RegexParser\n * Parses a string input.\n *\n * @name RegexParser\n * @function\n * @param {String} input The string input that should be parsed as regular\n * expression.\n * @return {RegExp} The parsed regular expression.\n */\nvar RegexParser = module.exports = function (input) {\n\n    // Validate input\n    if (typeof input !== \"string\") {\n        throw new Error(\"Invalid input. Input must be a string\");\n    }\n\n    // Parse input\n    var m = input.match(/(\\/?)(.+)\\1([a-z]*)/i);\n\n    // Invalid flags\n    if (m[3] && !/^(?!.*?(.).*?\\1)[gmixXsuUAJ]+$/.test(m[3])) {\n        return RegExp(input);\n    }\n\n    // Create the regular expression\n    return new RegExp(m[2], m[3]);\n};"},"lineCount":30}},"error":null,"hash":"b23e20f7a33f2d3d38e827c072eb3152","cacheData":{"env":{}}}